var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { Continuous } from '@antv/gui';
import { Quantile, Quantize, Threshold } from '@antv/scale';
import { format } from 'd3-format';
import { adaptor, G2Layout, inferComponentLayout, inferComponentShape, scaleOf, titleContent, } from './utils';
function inferContinuousConfig(scales, value, options, component) {
    const colorScale = scaleOf(scales, 'color');
    const { domain, range } = colorScale.getOptions();
    const [min, max] = [domain[0], domain.slice(-1)[0]];
    const { orientation, width, height, length } = inferComponentShape(value, options, component);
    const shape = { orientation, width, height };
    if (colorScale instanceof Threshold) {
        const thresholds = colorScale.thresholds;
        // for quantize, quantile scale
        if (colorScale instanceof Quantize || colorScale instanceof Quantile) {
            return Object.assign(Object.assign({ color: range }, shape), { data: [min, ...thresholds, max].map((value, index) => ({
                    value: value / max,
                    label: value,
                })) });
        }
        // for threshhold
        const data = [-Infinity, ...thresholds, Infinity].map((value, index) => ({
            value: index,
            label: value,
        }));
        return Object.assign(Object.assign({ data }, shape), { color: range, labelFilter: (datum, index) => {
                return index > 0 && index < data.length - 1;
            } });
    }
    // for linear, pow, sqrt, log, time, utc scale
    const opacityScale = scaleOf(scales, 'opacity');
    return Object.assign(Object.assign({}, shape), { data: colorScale.getTicks().map((value) => ({ value })), color: new Array(length).fill(0).map((d, i) => {
            const value = ((max - min) / (length - 1)) * i + min;
            const color = colorScale.map(value);
            const opacity = opacityScale ? opacityScale.map(value) : 1;
            return color.replace(/rgb[a]*\(([\d]{1,3}), ([\d]{1,3}), ([\d]{1,3})[\S\s]*\)/, (match, p1, p2, p3) => `rgba(${p1}, ${p2}, ${p3}, ${opacity})`);
        }) });
}
/**
 * Guide Component for continuous color scale.
 * @todo Custom style.
 */
export const LegendContinuous = (options) => {
    const { labelFormatter, layout, order, orientation, position, size, title, style } = options, rest = __rest(options, ["labelFormatter", "layout", "order", "orientation", "position", "size", "title", "style"]);
    return ({ scales, value, theme }) => {
        var _a, _b, _c;
        const { bbox } = value;
        const { x, y, width, height } = bbox;
        const finalLayout = inferComponentLayout(position, (_c = (_b = (_a = value.scales) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.guide) === null || _c === void 0 ? void 0 : _c.layout);
        const layoutWrapper = new G2Layout({
            style: Object.assign({ x,
                y,
                width,
                height }, finalLayout),
        });
        const { continuousLegend: legendTheme = {} } = theme;
        layoutWrapper.appendChild(new Continuous({
            style: adaptor(Object.assign({}, legendTheme, Object.assign(Object.assign({ titleText: titleContent(title), titleFontSize: 12, handle: false, indicator: false, labelAlign: 'value', labelFormatter: typeof labelFormatter === 'string'
                    ? (d) => format(labelFormatter)(d.label)
                    : labelFormatter }, inferContinuousConfig(scales, value, options, LegendContinuous)), style), rest)),
        }));
        return layoutWrapper;
    };
};
LegendContinuous.props = {
    defaultPosition: 'top',
    defaultOrientation: 'vertical',
    defaultOrder: 1,
    defaultSize: 60,
    defaultLength: 300,
};
//# sourceMappingURL=legendContinuous.js.map